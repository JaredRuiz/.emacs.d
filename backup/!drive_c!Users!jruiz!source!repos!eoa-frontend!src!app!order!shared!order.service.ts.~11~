import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';
import { environment } from '@env/environment';
import { Constants } from '@app/app-constants';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { EquipmentViewModel } from '@app/order/shared/viewmodels/equipment-viewmodel';
import { ProjectListItemViewModel } from '@app/order/shared/viewmodels/project-list-item-viewmodel';
import { CommentViewModel } from '@app/order/shared/viewmodels/comment-viewmodel';
import { Project } from '@app/order/shared/contracts/project';
import { Department } from '@app/order/shared/contracts/department';
import { EquipmentItemPatchDocumentModel } from '@app/shared/models/equipment-item-patch-document.model';
import { SplitEquipmenViewModel } from '@app/order/shared/viewmodels/split-equipment-viewmodel';
import { EquipmentCommentType } from '@app/shared/enums/equipment-comment-type.enum';
import { PurchaseHistoryViewModel } from '@app/order/shared/viewmodels/purchase-history-viewmodel';

@Injectable({
  providedIn: 'root'
})
export class OrderService {

  constructor(private http: HttpClient) { }

  getProjectDetails(projectId: string): Observable<Project> {
    const url = environment.orderAPIBaseUrl +
      Constants.getProjectDetailsUrl.replace(Constants.projectIdParam, projectId);
    return this.http.get<Project>(url).pipe(map((r) => {
      r.equipments.forEach(equipmentItem => {
        this.mapEquipmentFields(<EquipmentViewModel>equipmentItem);
      });
      return r;
    }));
  }

  getProjects(): Observable<Array<ProjectListItemViewModel>> {
    const url = environment.orderAPIBaseUrl + Constants.getProjectListUrl;
    return this.http.get<Array<ProjectListItemViewModel>>(url);
  }

  createProject(newProject: Project): Observable<Boolean> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    const url = environment.orderAPIBaseUrl +
      Constants.createProjectUrl;

    return this.http.post<Project>(url, JSON.stringify(newProject), { headers: headers, observe: 'response' })
      .pipe(
        map((r) => {
          return true;
        }),
        catchError((e: HttpErrorResponse) => {
          return throwError(e);
        })
      );
  }

  updateProject(updatedProject: Project): Observable<Project> {
    const url = environment.orderAPIBaseUrl + Constants.updateProjectUrl
      .replace(Constants.projectIdParam, updatedProject.id);
    return this.http.put<Project>(url, updatedProject)
      .pipe(
        map((r) => {
          return r;
        }),
        catchError((e: HttpErrorResponse) => {
          return throwError(e);
        })
      );
  }

  AddCommentToEquipment(comment: CommentViewModel, projectId: string, equipmentId: string): Observable<CommentViewModel> {
    const url = environment.orderAPIBaseUrl + Constants.addCommentForEquipmentUrl
      .replace(Constants.projectIdParam, projectId)
      .replace(Constants.equipmentIdParam, equipmentId);

    return this.http.post<CommentViewModel>(url, comment);
  }

  getDepartments(allInclusive: boolean): Observable<Array<Department>> {
    const url = environment.adminAPIBaseUrl + Constants.getDepartmentsUrl;
    const httpParams = new HttpParams().set('allInclusive', allInclusive ? 'true' : 'false');
    return this.http.get<Array<Department>>(url, { params: httpParams }).pipe(map((r) => r));
  }

  UpdateCommentInEquipment(comment: CommentViewModel, projectId: string, equipmentId: string): Observable<CommentViewModel> {
    const url = environment.orderAPIBaseUrl + Constants.updateCommentInEquipmentUrl
      .replace(Constants.projectIdParam, projectId)
      .replace(Constants.equipmentIdParam, equipmentId)
      .replace(Constants.commentIdParam, comment.id);

    return this.http.put<CommentViewModel>(url, comment);
  }

  patchEquipmentUpdates(
    projectId: string,
    equipmentId: string,
    updatePath: string,
    modifiedEquipmentPatch: Array<EquipmentItemPatchDocumentModel>): Observable<EquipmentViewModel> {
    const url = (environment.orderAPIBaseUrl + Constants.patchEquipmenUpdatesUrl
      .replace(Constants.projectIdParam, projectId)
      .replace(Constants.equipmentIdParam, equipmentId)) + updatePath;
    return this.http.patch<EquipmentViewModel>(url, modifiedEquipmentPatch).pipe(map(equipment => {
      this.mapEquipmentFields(equipment);
      return equipment;
    }));
  }

  splitEquipments(projectId: string, equipmentId: string,
    splittedEquipment: SplitEquipmenViewModel): Observable<Array<EquipmentViewModel>> {
    const url = environment.orderAPIBaseUrl + Constants.splitEquipmentUrl
      .replace(Constants.projectIdParam, projectId)
      .replace(Constants.equipmentIdParam, equipmentId);

    return this.http.put<Array<EquipmentViewModel>>(url, splittedEquipment).pipe(map(equipments => {
      equipments.forEach(equipment => {
        this.mapEquipmentFields(equipment);
      });
      return equipments;
    }));
  }

  generateEquipmentDeliveryDates(projectId: string) {
    const url = environment.orderAPIBaseUrl + Constants.generateEquipmentDeliveryDatesUrl
      .replace(Constants.projectIdParam, projectId);

    return this.http.put(url, null);
  }

  sendSelectedEquipmentsToProcure(projectId: string, ids: string[]) {

    const url = environment.orderAPIBaseUrl + Constants.sendSelectedEquipmentsToProcureUrl
      .replace(Constants.projectIdParam, projectId);

    return this.http.put(url, ids);
  }

  updateEquipmentQuantity(projectId: string, equipmentId: string): Observable<EquipmentViewModel> {
    const url = environment.orderAPIBaseUrl + Constants.updateCommentInEquipmentUrl
      .replace(Constants.projectIdParam, projectId)
      .replace(Constants.equipmentIdParam, equipmentId);
    return this.http.put<EquipmentViewModel>(url, null);
  }

  private mapEquipmentFields(equipment: EquipmentViewModel) {

    let orderComment = equipment.comments.find(x => x.type.trimAll() === EquipmentCommentType[EquipmentCommentType.OrderingComments]);
    let procureComment = equipment.comments.find(x => x.type.trimAll() === EquipmentCommentType[EquipmentCommentType.ProcurementComments]);

    equipment.hasComments = !!orderComment && !!orderComment.id || !!procureComment && !!procureComment.id;

    if (!orderComment) {
      orderComment = <CommentViewModel>{ 'type': 'Ordering Comments' };
      equipment.comments.push(orderComment);
    }

    if (!procureComment) {
      procureComment = <CommentViewModel>{ 'type': 'Procurement Comments' };
      equipment.comments.push(procureComment);
    }

      equipment.finishesFilterString = this.mapFinishesFilterString(equipment);

      // TODO: this will get replaced by stuff from the backend...
      equipment.purchaseHistory = new Array<PurchaseHistoryViewModel>();
      var purchaseHistoryItem1 = <PurchaseHistoryViewModel> {
          currentTotalQuantity: '10',
          newTotalQuantity: '12',
          status: 'Accepted',
          historyCreatedDate: '01/01/2018',
          revisionBulletinNo: 'abcd1234',
          deliveryDate:  '01/01/2018',
          purchaseOrderNo: 'abc123',
          purchaseOrderCreationDate:  '01/01/2018',
          comments: 'There are a lot of comments associated with this item. I odnt have time to go into them all, but trust me, there are a lot. I am serious, if you dont believe me just click on the READMORE button that is around here somewhere and you will surely see',
          commentsExpanded: false,
          beingEdited: false
      };

      var purchaseHistoryItem2 = <PurchaseHistoryViewModel> {
          currentTotalQuantity: '11',
          newTotalQuantity: '13',
          status: 'Accepted',
          historyCreatedDate: '11/11/2018',
          revisionBulletinNo: 'abcd12334',
          deliveryDate:  '01/01/2018',
          purchaseOrderNo: 'abc123',
          purchaseOrderCreationDate:  '01/01/2018',
          comments: 'There are a lot of comments associated with this item. I odnt have time to go into them all, but trust me, there are a lot. I am serious, if you dont believe me just click on the READMORE button that is around here somewhere and you will surely see',
          commentsExpanded: false,
          beingEdited: false
            };

      var purchaseHistoryItem3 = <PurchaseHistoryViewModel> {
          currentTotalQuantity: '10',
          newTotalQuantity: '12',
          status: 'Accepted',
          historyCreatedDate: '01/01/2018',
          revisionBulletinNo: 'abcd1234',
          deliveryDate:  '01/01/2018',
          purchaseOrderNo: 'abc123',
          purchaseOrderCreationDate:  '01/01/2018',
          comments: 'There are a lot of comments associated with this item. I odnt have time to go into them all, but trust me, there are a lot. I am serious, if you dont believe me just click on the READMORE button that is around here somewhere and you will surely see',
          commentsExpanded: false,
          beingEdited: false
      };
      equipment.purchaseHistory.push(purchaseHistoryItem1);
      equipment.purchaseHistory.push(purchaseHistoryItem2);
      equipment.purchaseHistory.push(purchaseHistoryItem3);
  }

  private mapFinishesFilterString(equipment: EquipmentViewModel) {
    let finishesString;

    if (equipment.finishesSpecificationRequired) {
      finishesString = equipment.finishesMissing ? 'Required Finishes Missing' : 'Required Finishes Defined';
    } else {
      finishesString = 'Does Not Require Finishes';
    }

    return finishesString;
  }
}
