import { Component, OnInit, OnDestroy, Input, ViewChild, Renderer2, ElementRef } from '@angular/core';
import { Subject, Subscription, interval } from 'rxjs';
import { take } from 'rxjs/operators';

declare var $: any;

@Component({
  selector: 'app-modal-dialog',
  templateUrl: './modal-dialog.component.html',
})
export class ModalDialogComponent implements OnInit, OnDestroy {
  public visible = false;
  public visibleAnimate = false;
  public actionPositive = new Subject<boolean>();
  @ViewChild('modalFooter') footer;
  @Input() modelId;
  @Input() set width(value: string) {
    const modalDialog = this.el.nativeElement.querySelector('.app-modal-content');
    this.renderer.setStyle(modalDialog, 'width', value);
  }
  subscription$ = new Subscription();

  constructor(
    private renderer: Renderer2,
    private el: ElementRef
  ) { }

  ngOnInit() { }

  ngOnDestroy() {
    this.actionPositive.next(false);
    this.actionPositive.complete();
    this.subscription$.unsubscribe();
  }

  public show(): void {
    this.visible = true;
    this.subscription$.add(interval(100).pipe(take(1)).subscribe(() => this.visibleAnimate = true));
    setTimeout(() => {
      $('.Affirm').focus();
    }, 0);
    $(this.el.nativeElement).appendTo('body');
    $('#ContentPlaceholder').addClass('app-modal-open');
  }

  public showAndWait(): Subject<boolean> {
    this.visible = true;
    this.subscription$.add(interval(100).pipe(take(1)).subscribe(() => this.visibleAnimate = true));
    setTimeout(() => {
      $('.Affirm').focus();
    }, 0);
    $('#ContentPlaceholder').addClass('app-modal-open');
    return this.actionPositive;
  }

  public hide(): void {
    this.visible = this.visibleAnimate = false;
    this.subscription$.add(interval(300).pipe(take(1)).subscribe(() => this.visible = false));
    $('#ContentPlaceholder').removeClass('app-modal-open');
  }

  public onContainerClicked(event: MouseEvent): void {
    if ((<HTMLElement>event.target).classList.contains('modal')) {
      this.hide();
    }
  }
}
