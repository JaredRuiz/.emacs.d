import { Component, OnInit } from '@angular/core';
import { FilterCriteriaItemModel } from '@app/shared/models/filter-criteria-item.model';
import { ReportViewModel } from '@app/report/shared/view-models/report-viewmodel';
import { ReportEquipmentViewModel } from '@app/report/shared/view-models/report-equipment-viewmodel';
import { ReportService } from '@app/report/shared/report.service';
import { EventBus } from '@app/shared/eventbus';
import { HttpErrorResponse } from '@angular/common/http';
import { ReportColumnHeaderViewModel } from '@app/report/shared/view-models/report-column-header-viewmodel';
import { ReportProjectViewModel } from '@app/report/shared/view-models/report-project-viewmodel';
import { SelectedFilterCriteriaItemModel } from '@app/shared/models/selected-filter-criteria-item.model';
import { PurchasingReportConfiguration } from './purchasing-report-configuration';
import { Events } from '@app/shared/events';
declare var $: any;

@Component({
  selector: 'app-purchasing-report',
  templateUrl: './purchasing-report.component.html'
})
export class PurchasingReportComponent implements OnInit {

  selectedGroupByCriteria: any;

  orderByCriteria: Array<any>;
  selectedOrderByCriteria: any;

  reportHeaders: Array<ReportColumnHeaderViewModel>;
  reportFeed: ReportViewModel;

  specialFilterCriteriaItems: FilterCriteriaItemModel[];
  advancedFilterCriteriaItems: FilterCriteriaItemModel[];
  selectedAdvancedFilterCriteriaItems: SelectedFilterCriteriaItemModel[];

  originalEquipments: Array<ReportEquipmentViewModel>;

  selectedProject: ReportProjectViewModel;

  constructor(
    private reportService: ReportService,
    private bus: EventBus
  ) {
    this.advancedFilterCriteriaItems = <FilterCriteriaItemModel[]>PurchasingReportConfiguration.advancedFilterSettings;
  }

  ngOnInit() {
    this.reportHeaders = <ReportColumnHeaderViewModel[]>PurchasingReportConfiguration.reportHeaderSettings;

    this.selectedGroupByCriteria = { 'label': 'department', 'fn': (e: any) => e.departmentNumber + ' ' + e.departmentDescription };
  }
  ngOnDestroy() {
    this.selectedAdvancedFilterCriteriaItems = this.reportFeed = this.originalEquipments = this.selectedProject = null;
  }

  onSelectedProjectChangeTriggered(selectedProject) {
    this.selectedProject = selectedProject;
    this.loadEquipments();
  }

  onSelectedSpecialFiltersChangeTriggered(eventData: any) {
    if (!eventData.selectedSpecialFilterItems
      || !Array.isArray(eventData.selectedSpecialFilterItems)
      || eventData.selectedSpecialFilterItems.length === 0) {
      return;
    }

    this.selectedAdvancedFilterCriteriaItems = []; // reset advanced filters to render report with special filters only
    let filteredEquipments = $.extend(true, [], this.originalEquipments);

    let chosenCriteria = eventData.selectedSpecialFilterItems.filter(x => x.text !== 'ALL');
    chosenCriteria.forEach(criteria => {
      filteredEquipments = filteredEquipments.filter(item => item[criteria.property] === criteria.text);
    })
    this.reportFeed = <ReportViewModel>{
      reportHeaders: this.reportHeaders,
      projects: [this.selectedProject],
      reportData: filteredEquipments
    };
  }

  onSelectedAdvancedFiltersChangeTriggered(selectedAdvancedFilterItems: SelectedFilterCriteriaItemModel[]) {
    this.selectedAdvancedFilterCriteriaItems = selectedAdvancedFilterItems;
  }

  private loadEquipments() {
    this.reportService.getPurchasingReport(this.selectedProject.id)
      .subscribe(equipments => {
        equipments.forEach(x => {
          x.details = x.comments;
        })
        this.originalEquipments = $.extend(true, [], equipments);
        this.reportFeed = {
          reportHeaders: this.reportHeaders,
          projects: [this.selectedProject],
          reportData: equipments
        };
      },
        (errorResponse: HttpErrorResponse) => {
          if (errorResponse.status === 404) {
            this.bus.publish(Events.WARNING_NOTIFICATION,
              'Unable to find a project with ' +
              'the requested id. Try refreshing page for an updated list of projects.');
          } else {
            this.bus.publish(Events.WARNING_NOTIFICATION, errorResponse.message);
          }
        });
  }

}
